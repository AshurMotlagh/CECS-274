                                                  root
                                                   58
                                     4                           87
                           null                34
                                       5               45
                               null            7
                                        null          23

BST myTree = new BST();
x = myTree.size();


class BST{
    public int size() {   //size of the tree
        if(root == null)
            return 0;
        else
            return 1 + size(Lc) + size(Rc);
    }
    private int size(Node p){
        if (p == null)
            return 0;
        else
            return 1 + size(p.lc) + size(p.rc);
    }
    public int sum(){
        if(root == null)
            return 0;
        else
            return root.getValue() + sum(root.Lc) + sum(root.Rc);
    }
    private int sum(Node p){
        if (p == null)
            return 0;
        else
            return p.getValue() + size(p.lc) + size(p.rc);
    }
    public void display(){
        if (root == null)
            sout("tree is empty")
            return;
        else
            display(root);
    }
    private void display(Node p){
        if(p == null)
            return;
        else{
            display(p.Lc);
            sout(p.getValue());
            display(r.rc);
        }
    }
    public int height(){
        if(root == null)
            return 0;
        else
            return 1 + max(height(root.lc), height(root.rc))
    }
    private int height(Node p){

    }
}



pre-order traversal --> p,lc,rc
post-order traversal --> lc,rc,p
in-order traversal --> lc,p,rc